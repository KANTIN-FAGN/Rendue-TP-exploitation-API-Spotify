package structure

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"time"
)

type SDM struct {
	NameTitre string `json:"name"`
	Artiste   []struct {
		Name string `json:"name"`
	} `json:"artists"`
	Album struct {
		NameAlbum string `json:"name"`
		Date      string `json:"release_date"`
		Image     []struct {
			Img string `json:"url"`
		} `json:"images"`
	} `json:"album"`
	Liens struct {
		Lien string `json:"spotify"`
	} `json:"external_urls"`
}

type JUL struct {
	Items []struct {
		Name          string `json:"name"`
		Release_date  string `json:"release_date"`
		Total_tracks  int    `json:"total_tracks"`
		Images        []struct {
			Url    string `json:"url"`
			Height int    `json:"height"`
			Width  int    `json:"width"`
		} `json:"images"`
	} `json:"items"`
}

var Token string

func ApiJul() JUL {
	apiToken := getAccessToken()
	apiURL := "https://api.spotify.com/v1/artists/3IW7ScrzXmPvZhB27hmfgy/albums"

	data := JUL{}
	requestApi(apiURL, apiToken, &data)

	fmt.Println(" ")
	fmt.Println("Nom :", data.Items[0].Name)
	fmt.Println("Date :", data.Items[0].Release_date)
	fmt.Println("Tracks :", data.Items[0].Total_tracks)
	fmt.Println("Cover :", data.Items[0].Images[0].Url)
	fmt.Println(" ")

	return data
}

func ApiSDM() SDM {
	apiToken := getAccessToken()
	apiURL := "https://api.spotify.com/v1/tracks/0EzNyXyU7gHzj2TN8qYThj?market=FR"

	data := SDM{}
	requestApi(apiURL, apiToken, &data)

	fmt.Println(" ")
	fmt.Println("Cover album :", data.Album.Image[0].Img)
	fmt.Println("Artiste :", data.Artiste[0].Name)
	fmt.Println("Album :", data.Album.NameAlbum)
	fmt.Println("Nom du titre :", data.NameTitre)
	fmt.Println("Date de sortie :", data.Album.Date)
	fmt.Println("Lien du titre :", data.Liens.Lien)
	fmt.Println(" ")

	return data
}

func requestApi(apiURL, apiToken string, data interface{}) {
	httpClient := http.Client{
		Timeout: time.Second * 2,
	}

	req, err := http.NewRequest("GET", apiURL, nil)
	if err != nil {
		fmt.Println("Erreur lors de la création de la requête:", err)
		return
	}
	req.Header.Set("Authorization", "Bearer "+apiToken)

	resp, err := httpClient.Do(req)
	if err != nil {
		fmt.Println("Erreur lors de l'envoi de la requête:", err)
		return
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("Erreur lors de la lecture de la réponse:", err)
		return
	}

	err = json.Unmarshal(body, &data)
	if err != nil {
		fmt.Println("Erreur lors du décodage JSON:", err)
		return
	}
}

func getAccessToken() string {
	if Token == "" {
		ReloadApi()
	}
	return Token
}

// Recharger le Token
func ReloadApi() {
	urlToken := "https://accounts.spotify.com/api/token"
	const clientId = "956bd4f29c2641749d2da00abb2ca06d"
	const clientSecret = "ff9ba1a84e884d35b64fd6bb0750c816"

	httpClient := http.Client{
		Timeout: time.Second * 2,
	}
	// Création du corps de ma requête pour avoir les accès au token
	BodyReq := bytes.NewBufferString("grant_type=client_credentials&client_id=" + clientId + "&client_secret=" + clientSecret)

	// Création de la requête HTTP vers l'api en POST avec l'url du token et le corps de ma requête
	req, errReq := http.NewRequest("POST", urlToken, BodyReq)
	if errReq != nil {
		fmt.Println("Error creating request :", errReq.Error())
		os.Exit(1)
	}

	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, errRes := httpClient.Do(req)
	if resp.Body != nil {
		defer resp.Body.Close()
	} else {
		fmt.Println("Error creating response :", errRes.Error())
		os.Exit(2)
	}
	//Décode le JSON
	var reponseMap map[string]interface{}

	decoder := json.NewDecoder(resp.Body)
	errJSON := decoder.Decode(&reponseMap)
	if errJSON != nil {
		fmt.Println("Error reading JSON :", errJSON.Error)
		os.Exit(4)
	}

	Token = reponseMap["access_token"].(string)
}
